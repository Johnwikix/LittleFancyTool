<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAf/4AAH//gAD//8AB///wB///////////8=
</value>
  </data>
</root>